(take 5 tri)
(source tri)
(take 5 peg-game.core/tri)
(load-file 'src/peg_game/core.clj)
(load-file 'src/peg_game/core.clj')
(help)
help
(doc os)
(find-doc "os")
exit
(doc clojure.core/some)
(some #{:fred} {:jim 1 :john 2})
(some #{:fred} {:jim 1 :fred 2})
my-board
(some (comp not-empty (partial valid-moves my-board))
(map first (filter #(get (second %) :pegged) board))))
(some (comp not-empty (partial valid-moves my-board))
(map first (filter #(get (second %) :pegged) my-board))))
(some (comp not-empty (partial valid-moves my-board))
(map first (filter #(get (second %) :pegged) my-board)))
(some (comp not-empty (partial valid-moves {}))
(map first (filter #(get (second %) :pegged) {})))
